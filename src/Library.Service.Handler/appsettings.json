{
    "connectionString": "mongodb://172.27.0.175:27017",
    "inventoryReadDBConnectionString": "data source=172.27.0.175;initial catalog=BookInventoryDB;uid=sa;pwd=a@12345",
    "inventoryWriteDBConnectionString": "data source=172.27.0.175;initial catalog=BookInventoryDB;uid=sa;pwd=a@12345",
    "rentalReadDBConnectionString": "data source=172.27.0.175;initial catalog=BookRentalDB;uid=sa;pwd=a@12345",
    "rentalWriteDBConnectionString": "data source=172.27.0.175;initial catalog=BookRentalDB;uid=sa;pwd=a@12345",
    "logDBConnectionString": "data source=172.27.0.175;initial catalog=LibraryLogDB;uid=sa;pwd=a@12345",
    "signalRUrl": "http://172.27.0.180",
    "rabbitMQUrl": "amqp://172.27.0.189:5672",
    "rabbitMQUserName": "guest",
    "rabbitMQPassword": "guest",
    "handlers": [{
            "name": "InventoryService",
            "libraryName": "Library.Service.Inventory.Domain"
        },
        {
            "name": "RentalService",
            "libraryName": "Library.Service.Rental.Domain"
        }
    ],
    "diMappings": [{
            "interface": "Library.Domain.Core.ILogDBConnectionStringProvider",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Service.Handler.AppsettingLogDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Domain.Core.ILogger",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.Logger.SQLServer.Logger",
            "tAssembly": "Library.Infrastructure.Logger.SQLServer"
        },
        {
            "interface": "Library.Domain.Core.DataAccessor.IDomainRepository",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Domain.Core.DataAccessor.DomainRepository",
            "tAssembly": "Library.Domain.Core"
        },
        {
            "interface": "Library.Domain.Core.IEventStorage",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.EventStorage.MongoDB.MongoDBEventStorage",
            "tAssembly": "Library.Infrastructure.EventStorage.MongoDB"
        },
        {
            "interface": "Library.Infrastructure.Messaging.RabbitMQ.IRabbitMQUrlProvider",
            "sAssembly": "Library.Infrastructure.Messaging.RabbitMQ",
            "implementation": "Library.Service.Handler.AppsettingRabbitMQUrlProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Domain.Core.Messaging.IEventPublisher",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.Messaging.RabbitMQ.RabbitMQEventPublisher",
            "tAssembly": "Library.Infrastructure.Messaging.RabbitMQ"
        },
        {
            "interface": "Library.Domain.Core.Messaging.IEventSubscriber",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.Messaging.RabbitMQ.RabbitMQEventSubscriber",
            "tAssembly": "Library.Infrastructure.Messaging.RabbitMQ"
        },
        {
            "interface": "Library.Domain.Core.Messaging.ICommandSubscriber",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.Messaging.RabbitMQ.RabbitMQCommandSubscriber",
            "tAssembly": "Library.Infrastructure.Messaging.RabbitMQ"
        },
        {
            "interface": "Library.Domain.Core.DataAccessor.IEventDBConnectionStringProvider",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Service.Handler.AppSettingEventDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Service.Inventory.Domain.DataAccessors.IInventoryReadDBConnectionStringProvider",
            "sAssembly": "Library.Service.Inventory.Domain",
            "implementation": "Library.Service.Handler.AppsettingInventoryReadDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Service.Inventory.Domain.DataAccessors.IInventoryWriteDBConnectionStringProvider",
            "sAssembly": "Library.Service.Inventory.Domain",
            "implementation": "Library.Service.Handler.AppsettingInventoryWriteDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Service.Inventory.Domain.DataAccessors.IInventoryReportDataAccessor",
            "sAssembly": "Library.Service.Inventory.Domain",
            "implementation": "Library.Infrastructure.DataPersistence.Inventory.SQLServer.InventoryReportDataAccessor",
            "tAssembly": "Library.Infrastructure.DataPersistence.Inventory.SQLServer"
        },
        {
            "interface": "Library.Service.Rental.Domain.DataAccessors.IRentalReadDBConnectionStringProvider",
            "sAssembly": "Library.Service.Rental.Domain",
            "implementation": "Library.Service.Handler.AppsettingRentalReadDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Service.Rental.Domain.DataAccessors.IRentalWriteDBConnectionStringProvider",
            "sAssembly": "Library.Service.Rental.Domain",
            "implementation": "Library.Service.Handler.AppsettingRentalWriteDBConnectionStringProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Service.Rental.Domain.DataAccessors.IRentalReportDataAccessor",
            "sAssembly": "Library.Service.Rental.Domain",
            "implementation": "Library.Infrastructure.DataPersistence.Rental.SQLServer.RentalReportDataAccessor",
            "tAssembly": "Library.Infrastructure.DataPersistence.Rental.SQLServer"
        },
        {
            "interface": "Library.Infrastructure.Messaging.SignalR.ISignalRConnectionProvider",
            "sAssembly": "Library.Infrastructure.Messaging.SignalR",
            "implementation": "Library.Service.Handler.AppsettingSignalRConnectionProvider",
            "tAssembly": "Library.Service.Handler"
        },
        {
            "interface": "Library.Domain.Core.Messaging.ICommandTracker",
            "sAssembly": "Library.Domain.Core",
            "implementation": "Library.Infrastructure.Messaging.SignalR.SignalRCommandTracker",
            "tAssembly": "Library.Infrastructure.Messaging.SignalR"
        }
    ]
}